##################################################################################################### 
################################################# 날짜 시간 ##########################################
##################################################################################################### 
##################################################################### datetime vs. Timestamp
- datetime은 Python 표준 라이브러리에서 제공
- timestamp는 pandas 라이브러리에서 제공
- timestamp는 pandas의 다른 데이터 구조와의 호환성이 좋으며, 시계열 데이터를 다룰 때 유리
- timestamp는 datetime 객체의 기능을 확장하여 시계열 분석에 필요한 추가 기능을 제공
############################################ 상호 변환
####################### DT --> TS
dt1=datetime(2011,1,2)
ts1=pd.Timestamp(dt1)
####################### TS --> DT
ts1=pd.Timestamp('2011-01-02')
dt1=ts1.to_pydatetime()

##################################################################### 파이썬: 
datetime, strftime()을 사용하여 날짜를 문자열로, strptime()을 사용하여 문자열을 날짜로 변환
##################################################################### 넘파이: datetime54


#####################################################################  PANDAS
판다스: Timestamp - 시계열 데이터 처리에 최적화; 대규모 데이터셋에서 복잡하고 고급 시계열 데이터 처리에 적합
- to_datetime() 함수로 다양한 형식의 날짜 문자열을 datetime 객체로 변환                       <--> strftime (파이썬)
- resample, asfreq 등의 메서드로 시계열 데이터의 빈도를 변경
- DataFrame이나 Series 내의 날짜 데이터를 다룰 때, 다른 데이터 유형과의 통합된 처리가 가능
############################################ ex: to_datetime
import pandas as pd
date_str='2022-01-01'
date_dt=pd.to_datetime(date_str)
print(date_dt)
print(date_dt.date())
############################################ ex: list 객체에 to_datetime 적용
dates=['2022-01-01', '2022-01-05','2022-01-10']
date_objects=pd.to_datetime(dates)
print('날짜 객체:', date_objects)
############################################ ex: freq.로 날짜 범위 생성
date_range=pd.date_range(start='2022-01-01', end='2022-01-10', freq='D')

############################################ 날짜를 인덱스로 설정하여 데이터프레임을 구성하면 날짜를 기준으로 데이터 조작이 용이
data={'date':['2022-01-01', '2022-01-02','2022-01-03'], 'value':[1,2,3]}
df=pd.DataFrame(data); df.index.name=None
==> 날짜로 데이터를 인덱싱하고 슬라이싱
print(df.loc['2022-01-02']); print(df['2022-01-01': '2022-01-02'])
################## 불린으로 날짜 범위를 필터링
date_range=pd.date_range(start='2022-01-01', end='2022-01-10', freq='D')
date_series=pd.Series(date_range)
fd=date_series[(date_series >= '2022-01-01') & (date_series <= '2022-01-03')]
################## pandas는 resample 메서드를 제공하여 주어진 주기에 따라 데이터를 리샘플링 가능
date_range=pd.date_range(start='2022-01-01', periods=10, freq='D'); data={'value': range(10)}; df=pd.DataFrame(data, index=date_range)
monthly_sum=df.resample('M').sum()          # 월별 데이터 합계 계산
####### ex
date_range=pd.date_range(start='2022-01-01', periods=365, freq='D'); data={'value': np.random.randint(50,100, 365)}
df=pd.DataFrame(data, index=date_range); 
monthly_sum=df.resample('M').sum()
################## pandas의 datetime형식 데이터는 다양한 속성에 접근 가능
data={'date':['2022-01-01', '2022-01-02','2022-01-03'], 'value':[1,2,3]}
df=pd.DataFrame(data); df['date']=pd.to_datetime(df['date']); df.set_index('date',inplace=True)
df.index.name=None
df['Year']=df.index.year
df['month']=df.index.month
df['day']=df.index.day
df['day_of_week']=df.index.dayofweek
################## pandas의 datetime형식 데이터는 다양한 속성에 접근 가능 -- 2
################## index가 아닌 일반 column으로부터 속성을 뽑아 낼 때는 .dt를 사용 
file_path = '/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/stock-data.csv'
df = pd.read_csv(file_path)
df['New_Date']=pd.to_datetime(df['Date']); 
df['Year']=df['New_Date'].dt.year
df['month']=df['New_Date'].dt.month
df['day']=df['New_Date'].dt.day
df['day_of_week']=df['New_Date'].dt.dayofweek
################## 변환된 datetime형태를 문자열로 출력할 때
period_data = pd.Series(['2023-01', '2023-02', '2023-03'], name='period'); period_date = pd.to_datetime(period_data)
date_only_list=[date.strftime('%Y-%m-%d %H:%M:%S') for date in period_date]; print(date_only_list)

################## 주어진 월간 데이터를 timestamp로 변환하고 변환된 결과를 출력
# 문자열을 Period로 변환
period_data = pd.Series(['2023-01', '2023-02', '2023-03'], name='period')     ## 주어진 string type SR

period_data = period_data.astype('period[M]')    ## <== type을 STRING에서 datetime형태로 바꾸는것.. period M으로
print(period_data)
timestamp = period_data.apply(lambda x: x.to_timestamp())
print(timestamp)

##################     날짜 데이터 시리즈를 분기로 변환하고, 각 분기별로 데이터의 개수를 출력 (강사님)
date_series = pd.Series(pd.date_range('2023-01-01', '2023-12-31', freq='M'))
q_data=date_series.dt.to_period("Q")
quarter_cnt=q_data.value_counts().sort_index()        # 갯수 count

################## CF: 날짜 데이터 시리즈를 분기로 변환하고, 각 분기별로 데이터의 개수를 출력 (Mine)
date_series = pd.Series(pd.date_range('2023-01-01', '2023-12-31', freq='M'))
print(date_series, "\n")

## Option-1
quarterly_series = pd.Series(pd.date_range('2023-01-01', '2023-12-31', freq='q'))
print(quarterly_series, "\n")

## Option-2
#### resample ('Q')를 사용하면, 재샘플링 되면서 그룹의 첫번째값과 마지막 값을 기준으로 분기 되는데, 
# 이를 선택해서 사용할 수 있고, 이를 위해 first(), last()를 선택할 수 있음
date_series.index = pd.DatetimeIndex(date_series)
quarterly_series2 = date_series.resample('Q').first()
print(quarterly_series2[0])

quarterly_series2 = date_series.resample('Q').last()
print(quarterly_series2[0])
print(len(quarterly_series2))

##################################################################### 날짜로 인식하기 때문에 손쉽게 접근 가능
############################################ 슬라이싱 가능
df_ymd_range=df.loc['2018-06-26':'2018-06-29']
############################################ 2018-06으로 하면 2018-06월 모든 data 접근 
df_ym=df.loc['2018-06', 'Start':'High']

##################################################################### data SR의 index를 날짜로 설정##################################################################### 이걸 DF로 생성
from datetime import datetime
dates = [datetime(2011,1,2),datetime(2011,1,5),datetime(2011,1,7),datetime(2011,1,8),datetime(2011,1,10),datetime(2011,1,12)]
ts = pd.Series(np.random.randn(6),index=dates)
df=pd.DataFrame(ts,columns=['Value'])

############################################ Pandas에서는 아래와 같이 index로 TS가 들어가 있으면 다양한 형태도 
############################################ 자동으로 인식
## 2011-01-10   -0.154673
print(ts['1/10/2011'])
ts['20110110']
longer_ts=pd.Series(np.random.randn(365), index=pd.date_range('11/30/2023', periods=365))

########################################################################## TRUNC
ts=
2011-01-02    0.176384
2011-01-05   -1.640888
2011-01-07   -0.626014
2011-01-08   -0.700167
2011-01-10   -0.077337
2011-01-12   -0.111860
print(ts.truncate(before='2011-01-05', after='2011-01-10'))
==> 
2011-01-05   -1.640888
2011-01-07   -0.626014
2011-01-08   -0.700167
2011-01-10   -0.077337
######################
print(ts.truncate(after='1/9/2011'), '\n')
print(ts.truncate(before='1/9/2011'), '\n')

########################################################################## 
longer_ts=pd.Series(np.random.randn(365), index=pd.date_range('1/1/2000', periods=365))
longer_ts['2000-05'][:3]            # 5월 data를 slicing해서 슬라이싱된 data에서 4번째

##########################################################################
now=datetime.now()    # 현재시간
in_two_weeks=now+timedelta(weeks=2) # + 2주
pd.date_range(datetime.now(),in_two_weeks) # 현재 날짜로부터 2주를 date range로

##########################################################################
ts=pd.date_range(start='2023-11-01',end='2023-11-30', periods=30)

########################################################################## 시간 정보 제거
ts=pd.date_range(start='2012-05-02 12:56:31', periods=5, normalize=True)

########################################################################## FREQ
freq 매개변수에 사용되는 Frequncy strings

A calendar year end frequency
B business day frequency
C custom business day frequency
D calendar day frequency
W weekly frequency
M month end frequency
SM semi-month end frequency (15th and end of month)
BM business month end frequency
CBM custom business month end frequency
MS month start frequency
SMS semi-month start frequency (1st and 15th)
BMS business month start frequency
CBMS custom business month start frequency
Q quarter end frequency
pandas documents 참고: https://pandas.pydata.org/docs/

########################################################################## 매주 수요일
dates=pd.date_range('11/30/2023', periods=10, freq='W-WED')

########################################################################## 분기 마지막일 기준으로 찾아서 출력
dates=pd.date_range('11/30/2023', periods=10, freq='Q')



############################################################################ 매주 수요일을 찾아서 출력
dates=pd.date_range('11/30/2023', periods=10, freq='W-WED')
df=pd.DataFrame(np.random.randint(3, size=10), index=dates, columns=["운동시간"])

########################################################################## DF 만들기
np.random.seed(0)
long_df=pd.DataFrame(np.random.randn(10,4), index=dates, columns=["colorado", 'Texas', "New York", 'Ohio'])

########################################################################## DATA 선택
long_df.loc['2024-01'] ## 1월 data만 출력
long_df.loc['2024']    ## 년 단위로 출력
dates=pd.DatetimeIndex(['1/1/2000','1/2/2000','1/2/2000','1/2/2000','1/3/2000'])
dup_ts=pd.Series(np.arange(5), index=dates)

########################################################################## 중복값 평균/CNT level=0
grouped=dup_ts.groupby(level=0)
print(grouped.mean(), '\n')
grouped=dup_ts.groupby(level=0)
print(grouped.count(), '\n')

########################################################################## 특정 시간 단위
dates=pd.date_range('1/1/2000','2000-01-03 23:59', freq='4h')

########################################################################## HOUR/MIN
from pandas.tseries.offsets import Hour, Minute
Hour(2) + Minute(30)

########################################################################## 세 번째 금요일
# 매월 세 번째 금요일에 해당하는 날짜를 생성
# WOM: week of month, 3FRI: 3rd Friday
rng=pd.date_range('2000-01-01', '2012-09-01', freq='WOM-3FRI')


########################################################################## DAY
from pandas.tseries.offsets import Day, MonthEnd
now=datetime(2011, 11,17)
now + 3*Day()

##########################################################################
offset=MonthEnd()
print(offset.rollforward(now))                # 현재 날짜를 기준으로 가장 가까운 월말 날짜로 이동
offset.rollback(now)                          # 현재 날짜를 기준으로 가장 가까운 이전 월말 날짜로 이동

########################################################################## 기간을 타임 스탬프로 변환
rng=pd.period_range('2000-01-01', periods=3, freq='M')
ts=pd.Series(np.random.randn(3), index=rng)
ts.to_timestamp(how='end')

########################################################################## 날짜 범위에서 매월 첫 번째 날만 포함하는 데이터프레임을 작성
rng=pd.date_range('2023-01-01',end='2023-12-31', freq='MS')       # M: Month-End Frequency
DF=pd.DataFrame(np.random.randn(12,1), index=rng, columns=["values"])

########################################################################## 각 분기의 시작과 끝 날짜를 포함하는 데이터프레임을 작성
rng1 = pd.date_range(start='2020-01-01', end='2025', freq='Q')            # 분기 끝일
rng2 = pd.date_range(start='2020-01-01', end='2025', freq='QS-JAN')       # 분기 시작일
# rng2=rng1.dt.to_period("QS-JAN") ==> SR로 변환한다음에 사용 가능

# 두 DatetimeIndex를 리스트로 묶어서 합치기
rng = pd.DatetimeIndex(list(rng1) + list(rng2)).sort_values()
DF=pd.DataFrame(np.random.randn(41,1), index=rng, columns=["values"])
######################### Other Option
dates = pd.period_range(start='2020-01-01', end='2025', freq='Q')  
### pd.date_range vs. pd_period_range

df2=pd.DataFrame({'quarter': dates, 'start_date': dates.start_time.date})
##########################################################################12시간 간격으로 생성하고, 각 간격에 대해 누적 시간을 계산
time_delta_range = pd.timedelta_range(start='0', end='100 days', freq='12H')
time_delta_range
# 데이터프레임 생성
df = pd.DataFrame({ 'timedelta': time_delta_range,'cumulated_time': [timedelta.total_seconds()/3600 for timedelta in time_delta_range]})

########################################################################## 특정 날짜 이후의 데이터를 필터링
df = pd.DataFrame({ 'date': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05'],
    'value': [1, 2, 3, 4, 5]})
df['date'] = pd.to_datetime(df['date'])
filtered_df=df[df['date']> '2022-01-02']

########################################################################## 월별로 데이터의 합계를 계산
df = pd.DataFrame({ 'date': ['2022-01-01', '2022-01-15', '2022-02-01', '2022-02-15', '2022-03-01'],
    'value': [1, 2, 3, 4, 5]})
df['date'] = pd.to_datetime(df['date'])
df['month'] = df['date'].dt.to_period('M')
monthly_sum = df.groupby('month')['value'].sum().reset_index()

########################################################################## 주말(토요일과 일요일) 데이터를 필터링
df = pd.DataFrame({'date': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-08', '2022-01-09'],
    'value': [1, 2, 3, 4, 5]})
df['date'] = pd.to_datetime(df['date'])
df['day of week']=df['date'].dt.dayofweek
weekend_df=df[df['day of week'] >= 5]

########################################################################## 분기별 데이터의 평균을 계산
df['date'] = pd.to_datetime(df['date'])
df['quarter']=df['date'].dt.to_period('Q')
quarterly_mean=df.groupby('quarter')['value'].mean().reset_index()

########################################################################## (월요일부터 금요일)만 남기고 필터링
df['date'] = pd.to_datetime(df['date'])
df['day of week']=df['date'].dt.dayofweek
weekdays_df=df[df['day of week'] < 5]

#################################################### END ############################################ 
################################################# 날짜 시간 ##########################################
##################################################################################################### 

##################################################################################################### 
################################################# Examples ##########################################
##################################################################################################### 
################################## Q. 2023년 1월 1일부터 2023년 12월 31일까지의 날짜 범위를 생성하고, 이 날짜 범위에서 매월 첫 번째 날만 포함하는 데이터프레임을 작성
rng=pd.date_range('2023-01-01',end='2023-12-31', freq='MS')       # M: Month-End Frequency
DF=pd.DataFrame(np.random.randn(12,1), index=rng, columns=["values"])
DF.head(20)
################################## Q. 2020년부터 2025년까지의 분기별 기간 범위를 생성하고, 각 분기의 시작과 끝 날짜를 포함하는 데이터프레임을 작성
rng1 = pd.date_range(start='2020-01-01', end='2025', freq='Q')            # 분기 끝일
rng2 = pd.date_range(start='2020-01-01', end='2025', freq='QS-JAN')       # 분기 시작일
# rng2=rng1.dt.to_period("QS-JAN") ==> SR로 변환한다음에 사용 가능

# 두 DatetimeIndex를 리스트로 묶어서 합치기
rng = pd.DatetimeIndex(list(rng1) + list(rng2)).sort_values()
DF=pd.DataFrame(np.random.randn(41,1), index=rng, columns=["values"])
DF.head(10)
#### 강사님 답안
dates = pd.period_range(start='2020-01-01', end='2025', freq='Q')
### pd.date_range vs. pd_period_range

df2=pd.DataFrame({
    'quarter': dates,
    'start_date': dates.start_time.date,
    'end_date': dates.end_time.date

})

################################## Q.0일부터 10일까지의 시간 범위를 12시간 간격으로 생성하고, 각 간격에 대해 누적 시간을 계산하여 데이터프레임을 작성
time_delta_range = pd.timedelta_range(start='0', end='100 days', freq='12H')
df = pd.DataFrame({
    'timedelta': time_delta_range,
    'cumulated_time': [timedelta.total_seconds()/3600 for timedelta in time_delta_range]
})
################################## Q.주어진 df 에서 특정 날짜 이후의 데이터를 필터링
df = pd.DataFrame({
    'date': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04', '2022-01-05'],
    'value': [1, 2, 3, 4, 5]
})
df['date'] = pd.to_datetime(df['date'])
df

filtered_df=df[df['date']> '2022-01-02']
################################## Q.df에서 월별로 데이터의 합계를 계산하세요.
df = pd.DataFrame({
    'date': ['2022-01-01', '2022-01-15', '2022-02-01', '2022-02-15', '2022-03-01'],
    'value': [1, 2, 3, 4, 5]
})
df['date'] = pd.to_datetime(df['date']); df['month'] = df['date'].dt.to_period('M')
monthly_sum = df.groupby('month')['value'].sum().reset_index()
################################## Q. 데이터프레임에서 주말(토요일과 일요일) 데이터를 필터링하세요.
df = pd.DataFrame({
    'date': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-08', '2022-01-09'],
    'value': [1, 2, 3, 4, 5]
})
df['date'] = pd.to_datetime(df['date'])
df['day of week']=df['date'].dt.dayofweek
weekend_df=df[df['day of week'] >= 5]
################################## Q.주어진 df에서 분기별 데이터의 평균을 계산
df['date'] = pd.to_datetime(df['date']); df['quarter']=df['date'].dt.to_period('Q'); quarterly_mean=df.groupby('quarter')['value'].mean().reset_index()
################################## Q.df에서 작업 일자(월요일부터 금요일)만 남기고 필터링
df['date'] = pd.to_datetime(df['date']); df['day of week']=df['date'].dt.dayofweek; weekdays_df=df[df['day of week'] < 5]
################################## Q.
################################## Q.

