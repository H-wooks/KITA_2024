
#####################################################################################################
################################################## GENERAL ##########################################
##################################################################################################### 
vector = np.array([1, 2, 3])
matrix=np.array([[1,2,3], [ 4,5,6]])

# 사람의 나이, 키(cm), 몸무게(kg)을 벡터로 표현
person=np.array([30,175,70])
another_person=np.array([25,160,55])
difference=another_person-person
print(difference)


########################################################################################## 사이킷런 IRIS data set
# df.iloc[0]는 SR, df.iloc[0].values: array
df.iloc[0].values

from sklearn.datasets import load_iris    # 사이킷런 패키지 임포트

iris=load_iris()
# iris.data[10:15,:] 특징 벡터
x1=iris.data[0,:]

import pandas as pd
df=pd.DataFrame(iris.data, columns=iris.feature_names)
df.head()
#### 이러한 데이터에서 각각의 컬럼데이터들이 특징 벡터로 사용

########################################################################################## 행렬의 곱 : 선형변환
############################################### 2x3 dot 3x1 ==> 2x1 선형 변환
A=np.array ([
    [1,2,3],
    [4,5,6]
])
## 벡터 V 정의
V=np.array ([
    [1],
    [0],
    [-1] 
])

########################################################################################## 행렬의 곱 : 선형변환 행렬과 벡터의 곱셈
result=np.dot(A,V)
print(np.dot(x.T,y))
print(x.T@y)
######################### 1차원 행렬의 내적
vec1=np.array([1,2,3])
vec2=np.array([4,5,6])
print("내적:",np.dot(vec1,vec2))
######################### 행렬의 곱셈 2x2 @ 2x2 Using DOT
mat1=np.array([[1,2], [3,4]])
mat2=np.array([[5,6], [7,8]])
print("행렬 곱셈:\n",np.dot(mat1,mat2))
######################### 행렬의 곱셈 2x2 @ 2x2 using matmul
mat1=np.array([[1,2], [3,4]])
mat2=np.array([[5,6], [7,8]])
print("행렬 곱셈:\n",np.matmul(mat1,mat2))

######################### 다차원 행렬의 곱 using @ 연산자 / matmul
arr1=np.ones(shape=(2,3,4))
arr2=np.ones(shape=(2,4,5))
result=arr1 @ arr2
arr1=np.ones(shape=(2,3,4))
arr2=np.ones(shape=(2,4,5))
result=np.matmul(arr1,arr2)

######################### 행렬의 내적
내적은 두 벡터의 길이(크기)와 그 사이의 각도 θ에 의해  a⋅b=∥a∥*∥b∥*cosθ 로 표현될 수 있다.
print(np.arctan(2/3)*180/np.pi)          ==> Theta: 33.69
print(np.arctan(4/1)*180/np.pi)          ==> Theta: 75.96

########################################################################################## Various Types of Matrixes
############################################### Unit Matrix (ndentity Matrix)
######################### 임의의 행렬과 행렬곱을 수행하고 나면 원 matrix로 회귀
identity_matrix = np.eye(5)
identity_matrix = np.identity(5)
matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
identity_matrix = np.eye(3,dtype=int)
result = np.dot(matrix, identity_matrix)
print(np.allclose(result, matrix))      ==> True

######################### 단위행렬은 행렬과 그 역행렬이 동인한 유일한 행렬
I=np.eye(3)
print(np.allclose(I, np.linalg.inv(I))) ==> True

############################################### Inverse Matrix
matrix = np.array([[1, 2], [3, 4]])
inverse_matrix = np.linalg.inv(matrix)
######################### 행렬식 det 결과가 0이면 역행렬이 존재 하지 않음
np.linalg.det(A)
############################################### Inverse Matrix
mt1=np.random.randint(1,4, size=(3,3))
mt2=np.linalg.inv(mt1)
print(np.dot(mt1,mt2))
print(np.allclose(np.dot(mt1,mt2),np.identity(3)))          ##### 행렬 곱의 결과가 unit matrix인지 확인
## 역행렬이 존재하지 않는 경우 det(mat)=0
matrix_singular=np.array([[1,2], [2,4]])
try:
  inverse_singular=np.linalg.inv(matrix_singular)
  print("Inverse Matrix: \n",inverse_singular)
except:
  print("Threre's no Inverse Matrix")
  print(np.linalg.det(matrix_singular))

############################################### 대각행렬 (diagonal matrix)
diagonal_matrix = np.diag([1, 2, 3, 4, 5])
dig_even=np.diag(np.arange(2,11,2))          # 2부터 10까지의 짝수를 갖는 대각행렬
############### 대각 행렬은 matrix에 scalar scaling을 위해서 자주 사용
matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
diagonal_matrix = np.diag([1, 2, 3])
result = np.dot(matrix, diagonal_matrix)


############################################### 영행렬
zero_matrix = np.zeros((3, 3))             ## 튜플 요소들을 고정, np.zeros([3, 3]) 도 가능하지만, 변경 가능
print(np.all(zero_matrix==0))              ## 영행렬인지 확인


############################################### 전치행렬
transpose_matrix = matrix.T

############################################### 대칭행렬
# 대칭행렬을 생성하고 대칭행렬인지 확인
A=np.array([[1,2,3], [2,5,6], [3,6,9]])
is_symmetric = np.allclose(A, A.T)

############################################### 정방행렬/정사각행렬 (Square Matrix): 같은 수의 행과 열을 갖는 행렬 (n x n 행렬)
a=np.full((2,2), 7)

############################################### ## 대각합 계산 np.trance()
matrix = np.diag(np.arange(1, 11))
diagonal_sum = np.trace(matrix)

############################################### 상 / 하 삼각행렬
upper_triangular_matrix = np.triu([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
lower_triangular_matrix = np.tril([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

############################################### 

############################################### 

############################################### 



선형대수 file과 TASK 6.11자, 통계활용.ipynb 반영

#####################################################################################################
################################################# EXAMPLES ##########################################
##################################################################################################### 
########################################################## Q. mt1 형렬의 역행렬 mt2를 구한후에 mt1과 mt2의 행렬곱 결과가 단위 행렬인지 확인
mt1=np.random.randint(1,4, size=(3,3))
mt2=np.linalg.inv(mt1)
print(np.dot(mt1,mt2))
print(np.allclose(np.dot(mt1,mt2),np.identity(3)))

