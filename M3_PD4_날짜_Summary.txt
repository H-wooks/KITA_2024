##################################################################################################### 
################################################# 날짜 시간 ##########################################
##################################################################################################### 
파이썬: datetime, strftime()을 사용하여 날짜를 문자열로, strptime()을 사용하여 문자열을 날짜로 변환

넘파이: datetime54

#####################################################################  PANDAS
판다스: Timestamp - 시계열 데이터 처리에 최적화; 대규모 데이터셋에서 복잡하고 고급 시계열 데이터 처리에 적합
- to_datetime() 함수로 다양한 형식의 날짜 문자열을 datetime 객체로 변환                       <--> strftime (파이썬)
- resample, asfreq 등의 메서드로 시계열 데이터의 빈도를 변경
- DataFrame이나 Series 내의 날짜 데이터를 다룰 때, 다른 데이터 유형과의 통합된 처리가 가능
############################################ ex: to_datetime
import pandas as pd
date_str='2022-01-01'
date_dt=pd.to_datetime(date_str)
print(date_dt)
print(date_dt.date())
############################################ ex: list 객체에 to_datetime 적용
dates=['2022-01-01', '2022-01-05','2022-01-10']
date_objects=pd.to_datetime(dates)
print('날짜 객체:', date_objects)
############################################ ex: freq.로 날짜 범위 생성
date_range=pd.date_range(start='2022-01-01', end='2022-01-10', freq='D')

############################################ 날짜를 인덱스로 설정하여 데이터프레임을 구성하면 날짜를 기준으로 데이터 조작이 용이
data={'date':['2022-01-01', '2022-01-02','2022-01-03'], 'value':[1,2,3]}
df=pd.DataFrame(data); df.index.name=None
==> 날짜로 데이터를 인덱싱하고 슬라이싱
print(df.loc['2022-01-02']); print(df['2022-01-01': '2022-01-02'])
################## 불린으로 날짜 범위를 필터링
date_range=pd.date_range(start='2022-01-01', end='2022-01-10', freq='D')
date_series=pd.Series(date_range)
fd=date_series[(date_series >= '2022-01-01') & (date_series <= '2022-01-03')]
################## pandas는 resample 메서드를 제공하여 주어진 주기에 따라 데이터를 리샘플링 가능
date_range=pd.date_range(start='2022-01-01', periods=10, freq='D'); data={'value': range(10)}; df=pd.DataFrame(data, index=date_range)
monthly_sum=df.resample('M').sum()          # 월별 데이터 합계 계산
####### ex
date_range=pd.date_range(start='2022-01-01', periods=365, freq='D'); data={'value': np.random.randint(50,100, 365)}
df=pd.DataFrame(data, index=date_range); 
monthly_sum=df.resample('M').sum()
################## pandas의 datetime형식 데이터는 다양한 속성에 접근 가능
data={'date':['2022-01-01', '2022-01-02','2022-01-03'], 'value':[1,2,3]}
df=pd.DataFrame(data); df['date']=pd.to_datetime(df['date']); df.set_index('date',inplace=True)
df.index.name=None

df['Year']=df.index.year
df['month']=df.index.month
df['day']=df.index.day
df['day_of_week']=df.index.dayofweek
################## pandas의 datetime형식 데이터는 다양한 속성에 접근 가능 -- 2
################## index가 아닌 일반 column으로부터 속성을 뽑아 낼 때는 .dt를 사용 
file_path = '/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/stock-data.csv'
df = pd.read_csv(file_path)
df['New_Date']=pd.to_datetime(df['Date']); 
df['Year']=df['New_Date'].dt.year
df['month']=df['New_Date'].dt.month
df['day']=df['New_Date'].dt.day
df['day_of_week']=df['New_Date'].dt.dayofweek
################## 변환된 datetime형태를 문자열로 출력할 때
period_data = pd.Series(['2023-01', '2023-02', '2023-03'], name='period'); period_date = pd.to_datetime(period_data)
date_only_list=[date.strftime('%Y-%m-%d %H:%M:%S') for date in period_date]; print(date_only_list)

################## 주어진 월간 데이터를 timestamp로 변환하고 변환된 결과를 출력
# 문자열을 Period로 변환
period_data = pd.Series(['2023-01', '2023-02', '2023-03'], name='period')     ## 주어진 string type SR

period_data = period_data.astype('period[M]')    ## <== type을 STRING에서 datetime형태로 바꾸는것.. period M으로
print(period_data)
timestamp = period_data.apply(lambda x: x.to_timestamp())
print(timestamp)

##################     날짜 데이터 시리즈를 분기로 변환하고, 각 분기별로 데이터의 개수를 출력 (강사님)
date_series = pd.Series(pd.date_range('2023-01-01', '2023-12-31', freq='M'))
q_data=date_series.dt.to_period("Q")
quarter_cnt=q_data.value_counts().sort_index()        # 갯수 count

################## CF: 날짜 데이터 시리즈를 분기로 변환하고, 각 분기별로 데이터의 개수를 출력 (Mine)
date_series = pd.Series(pd.date_range('2023-01-01', '2023-12-31', freq='M'))
print(date_series, "\n")

## Option-1
quarterly_series = pd.Series(pd.date_range('2023-01-01', '2023-12-31', freq='q'))
print(quarterly_series, "\n")

## Option-2
#### resample ('Q')를 사용하면, 재샘플링 되면서 그룹의 첫번째값과 마지막 값을 기준으로 분기 되는데, 
# 이를 선택해서 사용할 수 있고, 이를 위해 first(), last()를 선택할 수 있음
date_series.index = pd.DatetimeIndex(date_series)
quarterly_series2 = date_series.resample('Q').first()
print(quarterly_series2[0])

quarterly_series2 = date_series.resample('Q').last()
print(quarterly_series2[0])

print(len(quarterly_series2))

##################################################################### 

#################################################### END ############################################ 
################################################# 날짜 시간 ##########################################
##################################################################################################### 


#####################################################################################################
############################################### File I/O ############################################
##################################################################################################### 
file_data=pd.DataFrame({ 'col1':[1,2,3,4,5,6], 'col2':['A','A','B','B','C', 'C']})
file_data.to_csv('file_data.csv', index=None)
file_data=pd.read_csv('file_data.csv')

###################################################### 엑셀 loading
import pandas as pd
filepath1='/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/stock price.xlsx'
filepath2='/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/stock valuation.xlsx'
df1=pd.read_excel(filepath1, engine='openpyxl', index_col='id')
df2=pd.read_excel(filepath2, engine='openpyxl', index_col='id')

###################################################### CSV loading
file_path = '/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/titanic3.csv'
df = pd.read_csv(file_path)

###################################################### local file loading
from google.colab import files
# file 업로드
uploaded = files.upload()
file_path='mtcars.csv'; df=pd.read_csv(file_path,index_col=0)

#####################################################################################################
############################################ seaborn data load ######################################
#####################################################################################################
import seaborn as sns
# Titanic 데이터셋에서 age, sex, 등 5개 열을 선택하여 데이터 프레임 만들기
titanic = sns.load_dataset('titanic')
#df=titanic.loc[:, ['age', 'sex', 'class', 'fare', 'survived']]
df=titanic[['age', 'sex', 'class', 'fare', 'survived']]

