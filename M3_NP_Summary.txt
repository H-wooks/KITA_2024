#####################################################################################################
################################################# NP Array ##########################################
##################################################################################################### 
############################################### Creation ############################################
a=np.array([1,2,3])
b=np.array([4,5,6])              ### type출력해보면, <class 'numpy.ndarray'> <class 'list'>와는 다름
z=np.arange(5)
np.random.randn(2,3)
...
print(np.zeros(10))
print(np.ones((3,6)))
print(np.empty(shape=(10,), dtype=np.int64))
print(np.zeros(shape=(10,), dtype=np.int64))
print(np.empty(10, dtype='u4'))
ar=np.array([1,2,3,4], dtype='S')
num_str=np.array(['1.25', '-9.5', '42'], dtype=np.string_)        # np.string_은 배열의 데이터 타입이 바이트 문자열임을 명시 "S" 동일

##################################################################### RESHAPE 
original_array = np.array([[1, 2, 3], [4, 5, 6]])
print(original_array.reshape(-1))
print(original_array.flatten())              ## reshape(-1)과 동일



##################################################################### Reference Array와 동일 구조로 생성 
a=np.arange(10).reshape(2,5)
z=np.zeros_like(a)
o=np.ones_like(a)
f=np.full_like(a,5)

####################################### NDARRAY vs. LIST

생성:         np.array([1,2,3])                  [1,2,3]        ## np.array()로 하거나 np.arange()로
표기:         [3  6  9 12]                       [1,2,3]        ## 쉼표가 없이 공백으로만 구분  

<2차원 배열>
              [[ 0  1  2  3  4]
               [ 5  6  7  8  9]
               [10 11 12 13 14]]

<2차원 LIST>
 [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]        ## 쉼표로 구분

####################################### 다차원 (3차원)
##### 차원 구분마다 [] 로 구분
array3=np.array(
    [[[1,2,3,4,5],[6,7,8,9,10]],
     [[1,2,3,4,5],[6,7,8,9,10]],
     [[1,2,3,4,5],[6,7,8,9,10]]])

==> [[[ 1  2  3  4  5]
  [ 6  7  8  9 10]]

[[ 1  2  3  4  5]
  [ 6  7  8  9 10]]

 [[ 1  2  3  4  5]
  [ 6  7  8  9 10]]] 
############################################ Indexing/Slicing ##########################################
arr2d=np.array([[1,2,3],[4,5,6],[7,8,9]]); arr2d[0][2] == arr2d[0,2]
##################################### 배열의 부분 집합
arr2d[:2,1:]

##################################### boolean indexing
arr1d=np.arange(1,10)
print(arr1d)
arr3=arr1d[arr1d>5]
print(arr3)
print(arr1d>5)

##################################### Fancy 인덱싱 (정수 배열을 이용한 indexing)
arr=np.array([10,20,30,40,50])
index_arr=np.array([0,2,4])
print(arr[index_arr])

##################################### 부울 마스크를 사용한 인덱싱
arr=np.array([10,20,30,40,50])
mask=arr>25
print(mask)
print(arr[mask])

##################################### 정수배열과 부울 마스크를 결합
arr=np.array([10,20,30,40,50])
index_arr=np.array([0,2,4])
mask=arr[index_arr]>20
result=arr[index_arr][mask]
print(result)

##################################### 팬시 인덱싱 행별로 값 바꾸기
arr=np.empty((8,4))
print(arr,'\n')
for i in range(8):
  arr[i]=i
##################################### 행 순서 rearrange해서 출력
arr[[4,3,0,6]]

##################################### 행/열을 각각 정수형 배열로 정한 후 앞 배열/ 뒤배열의 조합으로 행/열을 indexing
arr=np.arange(32).reshape((8,4))
arr[[1,5,7,2],[0,3,1,2]]

##################################### 선택된 행에서 열을 다시 선택해서 multi의 행/열을 선택 가능
print(arr[[1,5,7,1]],'\n')
print(arr[[1,5,7,1]][:,[0,3,1,2]])



############################################### VIEW 생성 ############################################
##################################### 뷰와 원본 배열
arr=np.array([1,2,3,4])
# arr의 view 생성
arr_view=arr.view()
# view 수정
arr_view[0]=100
# 원본 배열과 view 모두 수정됨
# 뷰의 모양을 변경해도 원본 배열의 모양은 그대로 유지
### 리스트에는 뷰를 적용할 수 없음
### 슬라이스된 list에 값을 변경해도 원본은 그대로 유지되고 반영이 안됨

#################################### numpy.swapaxes / numpy.transpose ##################################
# np.swapaxes 첫번째 축(0번축, 즉 행)과 두번째 축(1번째 축, 즉 열)을 교환
y=np.swapaxes(a,0,1)
##################################### (0,1,2) ==> (1,0,2) 1/2/3번째 차원의 순서를 변경
y=np.transpose(a,(1,0,2))
print(y, y.shape)
#####################################
## a=np.arange(6).reshape(1,2,3)
# Q. a배열에 대해서 첫번째 차원자리에에 두번째차원을 두번째 차원자리에 세번째 차원을 세번째 차원자리에 첫번째 차원을 넣어서 변환
## (0,1,2) ==> (1,2,0) 차원
y=np.transpose(a,(1,2,0))        <==== 여기 안에 있는건 모두 차원을 의미, 두번체/세번째/첫번째 차원순서로 변경

############################################### Operation ############################################
print("Addition: ", a+b)           # addition
print("Subtraction: ", a-b)        # sub
print("Multiplication: ", a*b)     # Multiplication
print("Division: ", a/b)           # Division
print("Square: ", a**2)            # Squared
################################################## boolean
arr2=np.array([[0.,4.,1.], [7.,2.,12.]])
arr2>arr


############################################ Array 구조 수정 ###########################################
a=np.arange(10).reshape(2,5)
print("1차원 ==> 2차원: ", arr.reshape(3,-1),"\n")
print("1차원 ==> 2차원: ", arr.reshape(3,4), "\n")
print("1차원 ==> 3차원: ", arr.reshape(3,2,-1), "\n")
print("1차원 ==> 3차원: ", arr.reshape(3,2,2), "\n")

# Resizing    # reshape와 기능적으로 동일
resized=np.resize(a, (3,2))
print("resized Array: \n", resized)

##################################################################### Reference Array와 동일 구조로 생성 
a=np.arange(10).reshape(2,5)
z=np.zeros_like(a)
o=np.ones_like(a)
f=np.full_like(a,5)

##################################################################### SPLIT / CONCATENATE / STACK
## Spliting: 여러 하위 배열로 SPLIT
ar=np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])
split1, split2, split3 = np.split(ar,3)

## Concatenation
conn_1=np.concatenate((a1,a2), axis=1)
conn_0=np.concatenate((a1,a2), axis=0)

## Stacking
stacked=np.vstack((a,b))
stacked=np.vstack((a,b,a,b))

##################################################################### ARRAY 데이터 타입
arr1=np.array([1,2,3], dtype=np.float64)
arr2=np.array([1,2,3], dtype=np.int32)
int_array=int_array.astype(calibers.dtype)

##################################################################### LIST로 변환
li=array3d.tolist()



#####################################################################################################
#################################################  RANDOM  ##########################################
##################################################################################################### 
[Numpy Random 함수]  
- np.random.seed()       # seed를 통한 난수 생성
- np.random.randint    # 균일분포의 정수 난수 1개 생성
  * random_fields = np.random.randint(2, size=1000)
- np.random.rand       # 0부터 1사이의 균일분포에서 난수 매트릭스 array 생성
  * np.random.randn(3)
- np.random.randn      # 가우시안 표준 정규 분포에서 난수 매트릭스 array 생성
  * np.random.randn(12,1)
- np.random.shuffle    # 기존의 데이터의 순서 바꾸기
- np.random.choice     # 기존의 데이터에서 sampling
  * np.random.choice(2, size=1000)

[파이썬 내장 Random 함수]  
#### 난수/통계 관련 - random module
- random.random(): 0~1 부동소수점 숫자 반환
- random.randint(a, b): a~b 정수(b 포함) 반환
- random.randrange(start, stop[, step]): 정수를 반환. step 간격 조정
- random.choice(sequence): (리스트, 튜플 등) 아이템 선택
- random.shuffle(list): 리스트 섞는다
- random.sample(population, k): (리스트, 튜플 등) k개 항목==> list ## 중복 없이
- random.uniform(a, b): a~b Float 균등 분포
- random.gauss(mu, sigma): mu, sigma 정규 분포

##################################################################### 

########################################### END Encoding ############################################

#####################################################################################################
########################################## 유용한 함수/기능 ##########################################
##################################################################################################### 

##################################################################### 통계 처리 & 수학 처리
print("Average: ",np.mean(data))
print("Median: ",np.median(data))
print("std-3sig: ",np.std(data))
angles=np.array([0, np.pi/2, np.pi])
print("SINE: \n", np.sin(angles))
print("COSINE: \n", np.cos(angles))
print("EXP: \n", np.exp([1,2,3]))
print(arr.cumsum(),'행의 누적합\n')
print(arr.cumprod(),'행의 누적곱\n')
print(arr.cumprod(axis=1))
################################################## 각 수의 역수를 구해주는 함수: 0.85의 역수는 1/0.85
value=np.array([0.85, 1.85, 1, 100])
print(np.reciprocal(value))
################################################## 승수의 결과 값을 표시해주는 함수
value=np.array([2,10,15])
value1=np.array([1,2,3])
print(np.power(value,2))
print(np.power(value,value1))

################################################## 양의 원소의 개수
(a>0).sum()

################################################## any 매서드: 하나 이상의 값이 true인지 검사
bools=np.array([False,False,True,False])
bools.any()
################################################## all 매서드: 모든 원소가 True인지 검사
bools.all()

################################################## numpy.where는 삼항식의 벡터화 버전
arr=np.random.randn(4,4)
print(arr)
print(np.where(arr>0,1,-1))
[[ 2.88752534e+00  2.36589563e-01  1.47055764e-01 -8.79239648e-01]
 [-8.37892068e-01 -1.47199166e-01  2.17076073e+00  8.26066788e-04]
 [ 1.50213214e+00 -6.06123637e-01 -7.62479736e-01  5.56743096e-01]
 [ 7.30047738e-02 -4.87442726e-01  1.50299055e+00  6.34288264e-01]]
[[ 1  1  1 -1]
 [-1 -1  1  1]
 [ 1 -1 -1  1]
 [ 1 -1  1  1]]
## CF) 조건을 만족하는 인덱스를 반환
arr=np.random.randn(6)
print(arr)
print(np.where(arr !=0))

################################################## 다차원에서 정렬은 axis arg로 control
arr2d=np.array([[8,12],[7,1]])
print(arr2d,'\n')

sort_arr2d_ax0=np.sort(arr2d,axis=0)
print(sort_arr2d_ax0,'\n')

sort_arr2d_ax1=np.sort(arr2d,axis=1)
print(sort_arr2d_ax1,'\n')
[[1 2 3]
 [1 2 3]
 [1 2 3]]
[[1 1 1]
 [2 2 2]
 [3 3 3]]
################################ 정렬 원본에 반영 X
np.sort(arr2d,axis=0)
################################ 원본에 정렬 반영
arr=np.random.randn(6)
arr.sort()                           ## 원본에 반영 되므로 자체를 출력하면 None 반환
################################ 파이썬에서는
s_list=sorted(my_list2)              ## 원본에 반영 X
my_list=[3,2,1]; my_list.sort();     ## 원본에 반영 O

################################ 다차원 배열의 정렬 0/1로 행/열 정렬 control
arr=np.random.randn(2,4)
print(arr)
arr.sort(1)
print(arr) 

################################ 정렬된 행렬의 인덱스 반환: 기존 원본 행렬의 원소에 대한 인덱스를 필요로 할 때
orr_arr=np.array([3,1,9,5])
sort_indices=np.argsort(orr_arr)
print(orr_arr)
print(type(sort_indices))
sort_indices

################################ 5% 분위수  (1000개 중에 50번째 수)
large_arr=np.random.randn(1000)
large_arr.sort()
print(large_arr[:5])
large_arr[int(0.05*len(large_arr))]       # 5% 분위수

################################ 두 배열 x와 y간의 공통 원소를 찾아 정렬된 형태로 반환
x=np.array([1,2,3,4,5])
y=np.array([3,4,5,6,7])
print(np.intersect1d(x,y))

################################ 두 배열간에 고유한 원소를 정렬하여 반환
x=np.array([1,2,3,4,5])
y=np.array([3,4,5,6,7])
union=np.union1d(x,y)

################################ 배열 x의 각 원소가 배열 y에 존재하는지 여부를 불린 배열로 변환
x=np.array([1,2,3,4])
y=np.array([2,4,6])
print(np.in1d(x,y))
==> [False  True False  True]

################################ set 함수는 주어진 반복 가능한 객체 (여기서는 names배열)에서 중복을 제거하고 모든 고유한 원소를 포함하는 집합을 생성
names=np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
print(np.unique(names))
print(set(names))


################################################## numpy.meshgrid 함수
두 개 이상의 1차원 배열을 입력으로 받아서 각각의 배열을 기반으로 좌표 그리드를 생성하는 함수.
이 함수는 종종 함수의 값에 대한 2D 표면 플롯이나 3D 표면 플롯을 생성할 때 유용하게 사용
x=np.arange(1,4)
y=np.arange(1,4)
xs, ys=np.meshgrid(x,y)
print(xs)
print(ys)
## 
from matplotlib import pyplot as plt
# 1차원 배열 생성
x = np.arange(1, 4)
y = np.arange(1, 4)

# 2D 그리드 생성
xs, ys = np.meshgrid(x, y)

# 좌표 그리기
plt.figure(figsize=(8, 6))
plt.scatter(xs, ys, color='blue')
for i in range(len(x)):
    for j in range(len(y)):
        plt.text(xs[i, j], ys[i, j], f'({xs[i, j]}, {ys[i, j]})', fontsize=12, ha='right')

plt.title('2D Grid Coordinates with np.meshgrid')
plt.xlabel('X axis')
plt.ylabel('Y axis')
plt.grid(True)
plt.axhline(0, color='black', linewidth=0.5)
plt.axvline(0, color='black', linewidth=0.5)
plt.show()


###########################################  배열의 저장  ############################################
########################################### 배열 데이터의 저장 load
arr=np.arange(10)
np.save('some_array',arr)
np.load('some_array.npy')

########################################### np.savez: 여러개 배열을 압축해서 저장 /load
np.savez('array_archive.npz', a=arr, b=arr)
arch=np.load('array_archive.npz')
print(arch['b'])
print(arch['a'])

#####################################################################################################
##################################################    EX    ##########################################
##################################################################################################### 
########################################### 배열 [0, 1, 2, 3, 4, 5, 6, 7, 8]를 세 부분으로 나누기
ar=np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])
split1, split2, split3 = np.split(ar,3)
print("Splited Arrays: \n", split1, split2, split3)

########################################### Q. 정수와 실수로 구성된 list_e=[1.2, 2.3, 3]을 numpy를 이용해서 실수형과 정수형으로 출력
import numpy as np
list_e=[1.2, 2.3, 3]
array_e1=np.array(list_e)
print(array_e1, array_e1.dtype)
array_e2=array_e1.astype('int32')
print(array_e2, array_e2.dtype)

########################################### Q. array2d에서 슬라이싱을 사용해서 아래와 같이 출력하세요
# [[1 2]
# [4 5]]

# (2가지 방법)
# [[4 5 6]
# [7 8 9]]

# [[1 2 3]
# [4 5 6]
# [7 8 9]]

# [[2 3]
# [5 6]]

# [1 4]
arr2d=np.arange(1,10).reshape(3,3)
print(arr2d, '\n')

#1
print(arr2d[:2,:2],'\n')

#2
print(arr2d[1:,:],'\n')
print(arr2d[1:],'\n')
print(arr2d[1:,],'\n')

#3
print(arr2d[:,:],'\n')

#4
print(arr2d[:2,1:],'\n')

#5
print(arr2d[:2 ,0],'\n')

########################################### Q. 표준정규분포로 구성된 5행 5열의 다차원 배열을 생성하고 함수를 이용하여 평균과 표준편차를 구하세요
arr=np.random.randn(25).reshape(5,5)
print(arr)
print(arr.mean())
print(arr.std())

########################################### Q. 인덱싱을 이용하여 아래 배열을 내림차순으로 정렬하세요
arr=np.arange(10)
print(arr)
arr[::-1]

########################################### Q. [1,2,0,0,4,0]에서 zero가 아닌 인덱스를 배열 형태로 출력
arr=np.array([1,2,0,0,4,0])
print(np.where(arr!=0))

########################################### Q. arr1d에서 일반 인덱스를 이용 [6,7,8,9]를 출력
indexes=np.array([5,6,7,8])
arr_e2=arr1d[indexes]
print(arr_e2)

########################################### Q. 1에서 14까지 ndarray만들어서 저장하고 arr/2>5를 만족하는 값을 불린 인덱스로 출력
arr=np.arange(1,15)
newarr=arr[arr/2>5]
print(newarr)

########################################### Q. 1~100까지 정수에서 5의 배수이면서 2의 배수인것만 출력
arr=np.arange(1,101)
newarr=arr[(arr%5==0) & (arr%2==0)]
print(newarr)



########################################### Q. arr에서 [14,21,30]을 출력하도록 indexing
arr=np.arange(32).reshape((8,4))
print(arr[[3,5,7],[2,1,2]])


########################################### Q. a배열에 대해서 첫번째 차원자리에에 두번째차원을 두번째 차원자리에 세번째 차원을 세번째 차원자리에 첫번째 차원을 넣어서 변환
## (0,1,2) ==> (1,2,0) 차원
y=np.transpose(a,(1,2,0))        <==== 여기 안에 있는건 모두 차원을 의미, 두번체/세번째/첫번째 차원순서로 변경


########################################### Q. arr의 모든 양수를 2로 바꾸어 출력하세요 (양수만 2로 변경)
arr=np.random.randn(2,4)
print(arr,'\n')
print(np.where(arr>0,2, arr))

########################################### Q. 인덱싱을 사용하여 [1,0,1,0,1,0,1,0,1,0]를 출력하세요
arr=np.array([10,4,6,2,9,1,8,3,6,1])
np.where(arr>5,1, 0)
#### other option
a=np.ones(10, dtype=int)
print(a)
a[[1,3,5,7,9]]=0
print(a)

########################################### Q. 배열의 최대값과 최소값의 인덱스를 반환
arr=np.array([10,4,6,2,12,1,8,3,6,1])
print(np.where(arr == max(arr)))
print(np.where(arr == min(arr)))
==> 
(array([4]),)
(array([5, 9]),)

print(np.argmax(arr))
print(np.argmin(arr))
==> 
4
5

########################################### Q. reshape(-1,-1)을 이용 1차원을 2차원, 3차원으로 2차원을 1차원 3차원으로 3차원을 1차원 2차원으로 변환
arr_1d=np.arange(12)
arr_2d=arr_1d.reshape(2,-1)
arr_3d=arr_1d.reshape(-1,3,2)
print("from 1D Arr\n",arr_1d,'\n',arr_2d,'\n',arr_3d,'\n')
arr_1d2=arr_2d.reshape(-1)
arr_3d2=arr_2d.reshape(-1,2,3)
print("from 2D Arr\n",arr_1d2,'\n',arr_3d2,'\n')
arr_1d3=arr_3d.reshape(-1)
arr_2d3=arr_3d.reshape(-1,2)
print("from 3D Arr\n",arr_1d3,'\n',arr_2d3,'\n')

########################################### Q. 1차원 배열을 실수형으로 변환
arr_f=np.arange(12).astype(float)

########################################### Q. 1차원 배열의 dtype을 확인
arr=np.arange(12)
print(arr.dtype)

########################################### Q. 주어진 배열에서 음수 값을 모두 0으로 변경하세요.
arr = np.array([-5, -3, -1, 0, 1, 3, 5])
arr_2=np.where(arr<0,0,arr)

########################################### Q. 1 ~ 100 까지 배열에서 3의 배수인 것만을 출력
arr=np.arange(101)
print(arr[arr%3==0])

########################################### Q. 1 ~ 100 까지 배열에서 3의 배수이거나 5의 배수인 것만을 출력
arr=np.arange(101)
print(arr[(arr%3==0) & (arr%5==0)])

########################################### Q. 101 ~ 150 사이의 정수를 랜덤하게 추출, 2행 5열 다차원 배열을 생성 후 전치하세요
random_fields = np.random.randint(101, 151, size=(2,5))
Transposed=random_fields.T

########################################### Q. 표준정규분포로 구성된 5행 5열 다차원 배열을 생성하세요.
random_fields = np.random.randn(5,5)

########################################### Q.  original_array를 1차원 배열로 변환하여 출력하세요.
original_array = np.array([[1, 2, 3], [4, 5, 6]])
print(original_array.flatten())
print(original_array.reshape(-1))

########################################### Q. 주어진 3차원 배열에서 첫 번째 2차원 배열을 view로 생성하고, 이 view를 수정하여 원본 배열에 반영되도록 하세요. 
original_array = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
# 첫 번째 2차원 배열에 대한 view 생성
view_arr = original_array[0]
# view_array를 수정하여 원본 배열에 반영
view_arr[0, 0] = 100
print(view_arr, '\n\n', original_array)

########################################### Q. np.ones((10,10))을 아래와 같이 출력하세요.
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
arr=np.ones((10,10))
arr[1:9,1:9]=0

########################################### Q.  1 ~ 100을 아래와 같이 출력하세요.
[[  1   2   3   4   5   6   7   8   9  10]
 [ 20  19  18  17  16  15  14  13  12  11]
 [ 21  22  23  24  25  26  27  28  29  30]
 [ 40  39  38  37  36  35  34  33  32  31]
 [ 41  42  43  44  45  46  47  48  49  50]
 [ 60  59  58  57  56  55  54  53  52  51]
 [ 61  62  63  64  65  66  67  68  69  70]
 [ 80  79  78  77  76  75  74  73  72  71]
 [ 81  82  83  84  85  86  87  88  89  90]
 [100  99  98  97  96  95  94  93  92  91]]
result = np.empty((10, 10), dtype=int)
for i in range(10):
    if i % 2 == 0:
        result[i] = np.arange(1 + 10*i, 11 + 10*i)
    else:
        result[i] = np.arange(10 + 10*i, 0 + 10*i, -1)

########################################### Q. np.ones((5,5))을 아래와 같이 출력하세요.
[[0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 1. 1. 1. 1. 1. 0. 0.]
 [0. 0. 1. 1. 1. 1. 1. 0. 0.]
 [0. 0. 1. 1. 1. 1. 1. 0. 0.]
 [0. 0. 1. 1. 1. 1. 1. 0. 0.]
 [0. 0. 1. 1. 1. 1. 1. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0. 0. 0. 0.]]
#### 추가 답안
arr=np.ones((5,5))
## 좌우/상하 padding
padded=np.pad(arr, pad_width=2, mode='constant', constant_values=0)
print(padded)

## Asymmetric Padding
## 위로 1행, 아래로 2행, 왼쪽 3열, 오른쪽 4열 padding 추가
padded=np.pad(arr, ((1,2), (3,4)), mode='constant', constant_values=0)
print(padded)

########################################### Q. np.arange(4)을 이용해서 아래와 같이 출력하세요.
[[0, 0, 0, 0, 0],
 [1, 0, 0, 0, 0],
 [0, 2, 0, 0, 0],
 [0, 0, 3, 0, 0],
 [0, 0, 0, 4, 0]]

# Using np.diag
ref = np.arange(4)
print(np.diag(ref,k=1),'\n')
print(np.diag(ref+1,k=1),'\n')

#################### Other functions
########### EYEs
## 2 by 2 행렬, 시작위치 0
print(np.eye(N=2),'\n')
## 2 by 3 행렬, 시작위치 0
print(np.eye(N=2,M=3),'\n')
## 7 by 7 행렬, 시작위치 +2
print(np.eye(7,k=2),'\n')
########### Identify ==  정사각의 EYE
print("Identify\n")
print(np.identity(7),'\n')

########################################### Q. np.zeros((8,8))을 이용해서 아래와 같이 출력하세요(두가지 방식:인덱싱, tile 함수)
[[0, 1, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0],
[0, 1, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0],
[0, 1, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0],
[0, 1, 0, 1, 0, 1, 0, 1],
[1, 0, 1, 0, 1, 0, 1, 0]]
arr = np.zeros((8, 8), dtype=int)
arr[::2, 1::2] = 1
arr[1::2, ::2] = 1
print(arr)
########### another option
pattern = np.array([[0, 1], [1, 0]])
arr = np.tile(pattern, (4, 4))

########################################### Q. np.arange(336).reshape(6,7,8)에서 100번째 요소의 인덱스를 구하세요.
arr=np.arange(336).reshape(6,7,8)
print(np.where(arr==99))
### another option
index_3d = np.unravel_index(99, arr.shape)

########################################### Q. 주어진 두 배열 arr1과 arr2에서, arr2의 요소가 10보다 큰 위치의 arr1 요소들을 선택하세요.
arr1 = np.array([10, 20, 30, 40, 50])
arr2 = np.array([5, 15, 25, 10, 35])

print(arr1[arr2>10])

########################################### Q. 주어진 배열에서 짝수 인덱스에 있는 요소들을 선택하세요.
arr = np.array([5, 10, 15, 20, 25, 30, 35, 40])
print(arr[::2])

########################################### Q. 주어진 배열에서 20보다 작은 요소들의 값을 0으로 변경하세요.
arr = np.array([10, 25, 30, 15, 40, 5])
## Option1
arr[arr<20]=0
print(arr)
## Option2
arr = np.array([10, 25, 30, 15, 40, 5])
print(np.where(arr<20,0,arr))
print(arr)                    ## original arr는 유지
