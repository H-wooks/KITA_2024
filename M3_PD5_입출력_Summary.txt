#####################################################################################################
################################################## CSV ##############################################
#####################################################################################################
##################################################################### SAVE
import numpy as np
import pandas as pd
ar1 = np.arange(10).reshape(2,5)
df = pd.DataFrame(ar1,columns=list('abcde'))
df.to_csv('test.csv')
##################################################################### READ
df=pd.read_csv('test.csv')
################################### Unnamed index가 지정되는 문제
df=pd.read_csv('test.csv',index_col=0)

##################################################################### SAVE for Unnamed Index
df.to_csv('test.csv', index=None)



#####################################################################################################
################################################## JSON #############################################
#####################################################################################################
ar1 = np.arange(10).reshape(2,5)
df = pd.DataFrame(ar1,columns=list('abcde'))
df1=df.copy()
df1.to_json('test2.json')
df_j=pd.read_json('test2.json')
df_j

#####################################################################################################
################################################ BINARY #############################################
#####################################################################################################
##################################################################### 용량이 작아 간편하게 저장했다 불러와서 사용
# 바이너리 파일 읽고 쓰기
df1.to_pickle('test3.pkl')
df1=pd.read_pickle('test3.pkl')


#####################################################################################################
################################################## EXCEL ############################################
#####################################################################################################
filepath='/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/auto-mpg.xlsx'
df=pd.read_excel(filepath)
df.to_excel('test5.xlsx')
df=pd.read_excel('test5.xlsx')


#####################################################################################################
############################################### File I/O ############################################
##################################################################################################### 
file_data=pd.DataFrame({ 'col1':[1,2,3,4,5,6], 'col2':['A','A','B','B','C', 'C']})
file_data.to_csv('file_data.csv', index=None)
file_data=pd.read_csv('file_data.csv')

###################################################### 엑셀 loading
import pandas as pd
filepath1='/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/stock price.xlsx'
filepath2='/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/stock valuation.xlsx'
df1=pd.read_excel(filepath1, engine='openpyxl', index_col='id')
df2=pd.read_excel(filepath2, engine='openpyxl', index_col='id')

###################################################### CSV loading
file_path = '/content/drive/MyDrive/00_KITA_2404/M3_분석라이브러리/pandas/dataset/titanic3.csv'
df = pd.read_csv(file_path)

###################################################### local file loading
from google.colab import files
# file 업로드
uploaded = files.upload()
file_path='mtcars.csv'; df=pd.read_csv(file_path,index_col=0)

#####################################################################################################
############################################ seaborn data load ######################################
#####################################################################################################
import seaborn as sns
# Titanic 데이터셋에서 age, sex, 등 5개 열을 선택하여 데이터 프레임 만들기
titanic = sns.load_dataset('titanic')
#df=titanic.loc[:, ['age', 'sex', 'class', 'fare', 'survived']]
df=titanic[['age', 'sex', 'class', 'fare', 'survived']]


