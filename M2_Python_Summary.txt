### Manual 및 가이드, description관련
###### 파이썬 공식 문서
- https://docs.python.org/ko/3.10/library/index.html
### 내장함수 볼때
- print(dir(__builtins__))

### Linux
- !ls -la
- !touch xx.txt
- import glob glob.glob('/content/test/*.txt') ==> *.txt 일치하는 모든 파일/dir를 list로 반환
- !pip ~ : !는 colab 에서 Unix/Linux 셸명령어 실행시
- %pwd : %매직 명령어, %% 두개는 셀 전체: %%time 수행 시간 알아볼 때

### 특정 dir에서 특정 file 추출해서 list로 반환
- import glob; glob.glob('/content/test/*.txt') ==> 모든 text 반환

### os 관련 (import os)
- os.getcwd() %pwd와 동일
- os.chdir(dir), os.mkdir('new_folder'),os.rmdir(), os.remove('file'), os.rename('a','b'), os.listdir(), os.system(), os.environ(), os.getenv() ## os.listdir()  = !ls와 동일
- os.path.exists('file')
- shutil.copy(filename, filename+".bak") # import shutil 필요


###
# 유용한 함수와 기능들 모음
### General
- (몫,나머지)=divmod(a,b): 튜플형태로 반환
- keyword.kwlist: ['False', 'None', 'True', 'and', 'as', 'a .and so forth
- string.punctuation: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
- .lower(),.upper(),.strip(),.capitalize(),.title()
- print(dir(int)); print(dir(list))         # 객체에 대해서 사용가능한 메소드들을 모두 나열
- numbers = [i for i in range(99,0,-1)]
- numbers = [str(i) for i in range(99,0,-1)]

- a1=3; b1=4; b="a1*b1"==> print(eval(b)) ==> 12
- report_file='{}/{}'.format(report_path,"Report_File_Use_Freq.txt")
- list.count(x)
- list(string.ascii_lowercase)
-
### 입력 / 출력 방법 관련
- a=input("첫 번째 숫자:  ")
- print('') or print("")
#### 출력 format들
- print(f"\t'{target}'이 등장하는 모든 인덱스: {indexes}")
- print(f'{name:5} ==> {figure:10.4f}')  # 소수점 4, 자리수는 10으로 배정
- print(count, end=' '); print(i, sum, end=" \n");
- 출력 (1) print('나는 %s 보다 %s에 더 익숙합니다.' %(txt1,txt2)), (2) print('We are the {} who say "{}!"'.format('knights', 'Ni')), (3) f'나의 이름은 {name}입니다. 나이는 {age}입니다.'

### 다양한 판별 함수
- int(), float(), str()
- isupper(),islower(),isspace(),isdigit(),isalpha(),isalnum()

### 파일 Read/Write 관련
- f = open(filename,'r')          #r/w/a: 읽기/쓰기/추가 모드
  - f.close()
- with open(filename) as f:       # close() 필요없다
  - for line in f:                ## 한줄씩 읽기
  - data = f.read()               ## 한번에 다 읽기
  - f.write("First\n") 혹은 f.write(line)
- with open(filename,'rb/wb') as f:
  - pickle.dump(data,f); data=pickle.load(f)
- 한줄씩 읽기는 ==> for line in f:
- write는 ==> f.write("First\n")

#### 특이 숫자 표기 방식
- print(None); print(None); print(float('NaN')); print(float('inf')); print(float('-inf'))
- None, True, False
- return True  # True는 그냥 string으로 표기 하지 않아도 된다.
- ValueError ## ex) except ValueError:

#### binary/octa/hexa  변환: bin(), oct(), hex()
- a=0o172, b=0x7A, c=0b1111010 모두 8진수, 16진수, 2진수로의 122
- oct(122), hex(122), bin(122)로 구할 수 있다.

### 자료형
- 1.수치형(정수/실수/복소수),2.시퀀스(str,list,tuple),3.매핑:dict,4.set,5.불린
- list=[1,2,3]; tuple=(1,2,3); dict={'a':1,'b':2}
- set={1, 2, 3}; set1=set([1,2,5,4,3]); set2=set('hello')
- zip
  - list1=[1,2,3,4]; list2=['a','b','c','d']; zipped=zip(list1, list2);print(list(zipped)) ==> [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]
- ever_score=[(MatScore+EnScore)/2 for MatScore, EnScore in zip(m_score, e_score)]
- ('abc','def') -> [('a','d'),('b','e'),('c','f')]
  - L1=('abc','def')==>적용 unified3=[(i,j) for i, j in zip(L1[0], L1[1])]
- dictionary.clear() list.clear()

### List 관련
- list(), =[1,2,3], list.index(item), acess: list[i]
- sum(list),min(list),max(list), statistics.mean()
- list.extend([a,b]),list.append(a),
- del list[i], list.pop(i) list.insert(i,a),list.remove(a), list.clear()
- a=sorted(list, reverse=True)  vs. list.sort(reverse=True)
  - sort() method와 sorted() function 차이: sort() method는 반환 X, 변환O only for List to List vs. sorted() function는 반환 O, 변환 X , not only for List but for everything, to List
- string 치환: strVar = '[\'abc\', \'def\']'; strVar = strVar.replace('[', ''),    
- word=re.sub(r'[ ?.,!#\n\';:"]', '', word)
- indexes=[index for index, value in enumerate(items) if value == target]
- enumerate(List) ==> index와 value
- y=[return:(index or value)  for index, value in enumerate(LIST) if value == target] 형태...
- split 같은 함수 쓰고 나면 간혹 끝에 불필요한 요소 ''같은게 추가 될 경우 (문미에 separator가 있을 때) #results=[result for result in results if result] # results=list(filter(None, results)) 으로 해결 가능
- password = ''.join(random.choice(characters) for i in range(8))


### Dict 관련
- dict에서는 .keys() .values() .items()
- dict에서 key 존재 여부 판별: if key in dict:
- d1={'a':1, 'b':2, 'c':3, 'd':4, 'e':5}에 대해서 dict.keys(['a', 'b', 'c', 'd', 'e']), dict.values([1, 2, 3, 4, 5]), dict.items([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])로 반환
-del d1['d']  # key와 value의 item이 통째로 제거
- dummy=d1.pop('e')     # pop()는 은 키 "e"을 제거되면서 value값이 return
- orders[(menu_id, is_set)] = orders.get((menu_id, is_set), 0) + int(num) # orders는 {(menu_id, is_set):개수} 와 같이 tuple을 key로 사용할 수도 있다
- menu_items = {'1': ("불고기 비빔밥", 12000),'2': ("야채 비빔밥", 8000)} value에 tuple을 사용할 수도 있다. call하고자 할 때는  item_name, item_price = menu_items[menu_id] ==> menu_id="1"
- sorted(dict.items()

### SET 관련
S1 & S2: 교집합, S1 | S2: 합집합, S1-S2: 차집합

## List/Dict 중첩 관련
- users=[{'Name': 'John', 'Age': 28, 'Fav_Col': 'Blue'}, {'Name': 'Alice', 'Age': 24, 'Fav_Col': 'Red'}, {'Name': 'Maria', 'Age': 32, 'Fav_Col': 'Green'}] 에서...
- dict1={'a':1, 'b':2}를  list.expend(dict1)으로 할 수도
- users={'1':(a,b), '2':(c,d)...} 형태로 dict안에 tuple도..
  -for key, (name,price) in medu_item.items() 이렇게 불러서 사용
- age_sum=sum(user['Age'] for user in users)  #와 같이 for를 간단하게 돌려서 연산할 수 있음


### Plot (Matplotlib) 관련
- https://wikidocs.net/book/5011


### Loop / 조건문 관련
- for i in range(len(List)) / for i in List
- for key in dict:
- for name,phone in table.items():  #dict.items는 key와 value가 모두 출력
- while i < 5: i += 1; while True:   ~ break
- 아무런 액션 없이 나가고 싶을때:pass 사용 ex) if 1> 2: pass
- break: loop를 완전히 중단하고 돌아감 vs. continue: 해당 반복 회차에 대해서만 넘어가고 바로 다음 회차로 넘어감.
- try:  ~ except XXError as e:  >>> print(e)  .

#### Simple Checking Method
##### LIST에 넣어서 simple하게 checking 하는 방법
- y=["success" if score >= 60 else "failure"]
- y=[print("success") if score >= 60 else print("failure")]
- ex: y=[index  for index, value in enumerate(InList) if value > Thresh]
- ex: if any(num > 15 for num in numbers):
- results=[result for result in results if result]
- y=[print("저축증가") if income > expense else print("현상 유지 혹은 빚이 증가")]
- ever_score=[(MatScore+EnScore)/2 for MatScore, EnScore in zip(m_score, e_score)]    ## 각각은 List
- full_name=[first+" "+last for first, last in zip(first_name, last_name)]
-   filename=f"tasks_{today.strftime('%Y%m%d')}.txt"  이렇게 f-string 이용도 가능

- results2=list(map(lambda x: str(x) if x % 3 == 0 else x, list2))
- list_test=[{"name":"dummy1", "size":"200","freq":23},{"name":"dummy2", "size":"300","freq":10},{"name":"dummy3", "size":"100","freq":23} ]
===> sorted_freq_size=sorted(list_test, key=lambda x: (-int(x['freq']),int(x['size'])))
- score_list = [
    ("A학생", 60),
    ("B학생", 80),
    ("C학생", 50),
    ("D학생", 70),
]
===> score_list.sort(key = lambda x : -x[1])
- students=[('Alice','1반',90), ('Bob','2반',85), ('Charlie','2반',88)]
===> stud_new=sorted(students, key=lambda x: x[2], reverse=True)
===> students.sort(key=lambda x: (x[2],x[1]))

- math={'+':lambda a,b:a+b, '-':lambda a,b:a-b, '*':lambda a,b:a*b, '/':lambda a,b:a/b}
  - print(math[i](int(num[0]),int(num[1]))) --> i를 통해 선택해서 lambda적용

- upper_words=list(map(str.upper, words)) # words라는 list에 str.upper method를 map을 통해 적용
- words_new=[i for i in words if i.startswith('p')]
- words_new=list(filter(lambda x: x.startswith('p'), words))
- list2=[value for index, value in enumerate(list1) if value != 2]
- list2=list(filter(lambda x: x != 2, list1))
- list3=[i for i in list1 if i > 0] 위와 동일
- list(map(float,LIST))
- list를 함수처럼 사용
  - mylist=[lambda a,b:a+b, lambda a,b:a*b]
  - print(mylist[0](3,4))
  - print(mylist[1](3,4))
- is_even = lambda x: True if x%2 == 0 else False; print(is_even(4))
- dict의 value 기준으로 sort
  - words_db2=sorted(words_db.items(), key=lambda x: -x[1])  ---> list안 tuple형태 out
  - 다시 dict 형태로 하고 싶으면 ==> words_db2=dict(words_db2)
########## lambda / map / filter 관련해서 체계적으로 정리해놓기



### 함수 관련
- 함수 적용 시에 혹시 input arg가 없으면 아래와 같이 EXIT door까지 설정해 놓는게 좋다
- if not in_arg: return[]
- if set_choice in ['y', 'n']:
        - add_order(choice, set_choice == 'y') 형태로 쓸 수도
- def sum1(*args):    ==> 인자의 갯수가 가변적일 때 사용


### 클래스 CLASS  관련
-class AddMul:
- def add(self,n1,n2):          # self는 자기 자신을 의미하고 객체를 의미하므로 무조건 넣어줘야.
-   return n1+n2
- def mul(self,n1,n2):
-   return n1*n2
-obj1 = AddMul()           #obj1은 AddMul의 모든 자원 (메소드)를 쓸 수 있는 객체가 됨

#### 난수/통계 관련 - random module
- random.random(): 0~1 부동소수점 숫자 반환
- random.randint(a, b): a~b 정수(b 포함) 반환
- random.randrange(start, stop[, step]): 정수를 반환. step 간격 조정
- random.choice(sequence): (리스트, 튜플 등) 아이템 선택
- random.shuffle(list): 리스트 섞는다
- random.sample(population, k): (리스트, 튜플 등) k개 항목==> list ## 중복 없이
- random.uniform(a, b): a~b Float 균등 분포
- random.gauss(mu, sigma): mu, sigma 정규 분포

######## BeautifulSoup 관련
- response = requests.get(url)
- if response.status_code == 200:
- soup = BeautifulSoup(html_doc, 'html.parser')
- print(soup.title.text)
- print("Page Title:", soup.title.string if soup.title else "No title found")


### 그외 외부 라이브러리.. 외장 함수....
- import seaborn as sns
    - titanic=sns.load_dataset('titanic')


#### 특수 문자

＃ ＆ ＊ ＠ § ※ ☆ ★ ○ ● ◎ ◇ ◆ □ ■ △ ▲ ▽ ▼ → ← ↑ ↓ ↔ 〓 
◁ ◀ ▷ ▶ ♤ ♠ ♡ ♥ ♧ ♣ ⊙ ◈ ▣ ◐ ◑ ▒ ▤ ▥ ▨ ▧ ▦ ▩ ♨ ☏ ☎ ☜ ☞
¶ † ‡ ↕ ↗ ↙ ↖ ↘ ♭ ♩ ♪ ♬ ㉿ ㈜ № ㏇ ™ ㏂ ㏘ ℡ ® ª º

### 에러와 예외의 유형:
에러 : 프로그램이 실행되기 전에 발생하는 문제
- SyntaxError: 코드의 구문이 잘못되었을 때 생긴다.<br>

예외 : 실행 시간(runtime) 중에 발생하고 처리 가능
- NameError: 정의되지 않은 변수를 호출할 때 생긴다.
- TypeError: 연산이나 함수가 부적절한 유형의 객체에 적용될 때 발생한다.
- ValueError: 연산이나 함수가 적절하지 않은 값을 객체에 적용할 때 발생한다.
- IndexError: 리스트 등의 시퀀스에서 존재하지 않는 인덱스를 사용할 때 생긴다.
- KeyError: 딕셔너리에서 존재하지 않는 키를 사용할 때 발생한다.
- AttributeError: 존재하지 않는 속성이나 메서드를 호출할 때 생긴다.
- IOError 또는 OSError: 파일 입출력 과정에서 에러가 생길 때 발생한다.
- ZeroDivisionError: 0으로 나눌 때 생긴다.
- ImportError: 모듈을 임포트할 수 없을 때 발생한다.
- StopIteration: 이터레이터에 더 이상의 아이템이 없을 때 next()를 호출하면 발생한다.
- MemoryError: 메모리 할당이 실패할 때 생긴다.
- RecursionError: 재귀 호출이 너무 깊어질 때 발생한다.


#### timestamp
- time.time() 실수 형태
- time.localtime(time.time()) 정형화된 포맷으로..가독성 X
    - time.struct_time(tm_year=2024, tm_mon=5, tm_mday=9, tm_hour=1, tm_min=40, tm_sec=12, tm_wday=3, tm_yday=130, tm_isdst=0)
    - t = time.localtime()
    - today = f'{t.tm_year}-{t.tm_mon}-{t.tm_mday}'
- time.strftime('%a %d....',time.localtime(time.time))
- time.asctime(time.localtime(time.time))==> Mon Dec 28
- 오늘은 몇일 째 ?
  - numday=time.localtime(time.time())
  - print(numday)
  - numday.tm_yday



#### datetime
- import datetime ==> datetime.date.today()
- from datetime import datetime ==> datetime.now()
-import pytz; import datetime (or from datetime import datetime)
- now=datetime.datetime.now() ==>  2024-05-08 05:27:19.435785
  - now,now.year,now.month,now.day,now.hour,now.minute,now.second
- tz=pytz.timezone('Asia/Seoul'); now=datetime.datetime.now(tz)
- now_time = now.strftime('%Y-%m-%d %H:%M:%S') # %H:%M:%S대신에 %X해도 동일
- 경과된 날짜 계산
  - DateTime=datetime.date.today()
  - S_Y=datetime.date(DateTime.year,1,1)
  - day_passed=(DateTime-S_Y).days


#### timestamp ==> datetime
- from datetime import datetime
- datetime.fromtimestamp(time.time())  실수 형태가 datetime형태로 변환



## 포맷 코드 표
- 포맷코드 설명 예
  - %a 요일 줄임말 Sun, Mon, ... Sat
  - %A 요일 Sunday, Monday, ..., Saturday
  - %w 요일을 숫자로 표시, 일요일0, 토요일6, 0, 1, ..., 6
  - %d 일 01, 02, ..., 31
  - %b 월 줄임말 Jan, Feb, ..., Dec
  - %B 월 January, February, …, December
  - %m 숫자 월 01, 02, ..., 12
  - %y 두 자릿수 연도 01, 02, ..., 99
  - %Y 네 자릿수 연도 0001, 0002, ..., 2017, 2018, 9999
  - %H 시간(24시간) 00, 01, ..., 23
  - %I 시간(12시간) 01, 02, ..., 12
  - %p AM, PM AM, PM
  - %M 분 00, 01, ..., 59
  - %S 초 00, 01, ..., 59
  - %Z 시간대 대한민국 표준시
  - %j 1월 1일부터 몇일 째 001, 002, ..., 366 == 경과일수 + 1 :  1월 1일을 포함
  - %U 1년중 주차, 월요일이 한 주의 시작으로 00, 01, ..., 53
  - %W 1년중 주차, 월요일이 한 주의 시작으로 00, 01, ..., 53
  - %c 날짜, 요일, 시간을 출력, 현재 시간대 기준 Sat May 19 11:14:27 2018
  - %x 날짜를 출력, 현재 시간대 기준 05/19/18
  - %X 시간을 출력, 현재 시간대 기준 '11:44:22'



# 패턴매칭 관련
- input_str.strip()  ## string 앞 뒤로 공백 삭제
- .split(), .replace()는 정규 표현식 지원 X
- 반면, re.split, re.search, re.sub은 모두 정규 표현 지원
- test = re.sub("[.!~,]", "", InputText)  ##  이와 같이 []에 여러개 치환 인자 넣어도 된다. [abcd]이면, a, b, c, d 각각에 대해 ""로 치환
- .split([.!\,]+ ) 이거 지원 안됨, re.split([.!~,]+,InputText)은 지원 됨
- ex: SplitText = re.split('\s+',InStr)
- ex: test = InputText.split(" ")
- ex: test = re.split("[.!\~, ]+",InputText) # +는 [~] 한개 이상 반복 case를 위해
- results=re.search("\s", iden), re.search(substring, text) or re.search(r'xxx', text) 결과는 results.start(), .end() .group() 시작/끝 index와 matching str 반환
- regex = re.compile('[가-힣]'); p=regex.search(text)
  - p.group()..   ### [가-힣], [a-z], [A-Z]
- word=word.lower() .upper()
# 정규 표현
- re.search(substring, text) or re.search(r'xxx', text)
- 결과는 results.start(), .end() .group() 시작/끝 index와 matching str 반환
- re.split('[ *]', text)  공백과 *로 둘다 분리하고자 할 때 []으로 열거

# 특이/스페셜 정규표현 및 패턴매칭
- Basic 패턴매칭:
  - regex=re.compile('[a-zA-Z]+'); text=' Python3 is very good programming language!'; result=regex.findall(text) ==> ['Python', 'is', 'very', 'good', 'programming', 'language']
- dot(.) \n 제외 모든..: p=re.compile('a.+b') ==> 'a\nb' : not matching.
- re.DOTALL \n도 matching되도록: p=re.compile('a.+b', re.DOTALL)
- re.I (대문자 아이) 대소문자 구분없이 matching: p=re.compile('[a-z]+', re.I)
- re.M 각 라인의 처음을 ^로 인식: p = re.compile("^python\s+\w+",re.M) ==> 문자열이 여러 줄일때 줄의 처음도 ^로 인식.
- |(or와 동일한 의미): p = re.compile('CrowlServo')
- \b는 whitespace에 의해 구분, 반면 \B는 whitespace에 의해 구분된 단어가 아닌 경우에만 매치
  - p=re.compile(r'\bclass\b');      q=re.compile(r'\Bclass\B')
- 그룹 () ===>.group(0) 전체, group(1) 순차적으로 반환
  - \1은 앞의 매칭 그룹 재 참조 p=r'(\b\w+)\s+\1' ==> \1은 (\b\w+)에서 찾은 문자열과 정확히 일치 할 때 매칭
  - 비캡쳐 그룹 (?:~)
    - pattern=r'(?:\d{4})-(\d{2})-(\d{2})' ==> group(0)에는 포함되지만, match.group(1)과 match.group(2)은 (\d{4})부터가 아닌 각각 (\d{2}), 두번째 (\d{2})으로...
  - 중첩 그룹화: 순서는 외부 그룹부터 내부 그룹 순으로 indexing
    - p=re.compile(r'(\w+)\s+((\d+)[-](\d+)[-](\d+))')   ==>1:(\w+), 2:((\d+)[-](\d+)[-](\d+)), 3/4/5:1st/2nd/3rd (\d+)가 매칭
  - (?P<name>\w+) 그룹화 이름: p=re.compile(r'(?P<word>\w+)\s+(?P=word)')
    - .group('word')로 access하거나, .group(1)로 access 가능. 그런데 (?P=word)는 매칭이 안된다. 그래서 .group(2)는 error.
- 전/후방 탐색
  - 전방 긍정 탐색 (?=...): p=re.compile(r'.+(?=:)')는 'http://google.com'에 대해서 "http"를 반환 여기서 :는 결과에 포함 X
  - 후방 긍정 탐색 (?<=...): p = r'(?<=@)[a-zA-Z0-9,-]+(?=\.com)'은 '~support@company.com~'에 대해서 앞은 @, 뒤는 .com에 의해 바운드 되는 company를 반환
  - 전방 부정: (?!...)
  - 후방 부정: (?<!...)
- Greedy (탐욕스러운) 매칭: a.*b ===> a로 시작하고 b로 끝나는 가장 큰 단위의 문자열 반환
- Non-Greedy (비탐욕스러운) 매칭: a.*?b ===> a로 시작하고 b로 끝나는 가장 작은 단위의 문자열 반환



<img src='https://drive.google.com/uc?id=1E1BSMFvSoCz2gL7qmn4v1C0uVVBGzNZ8'>
<img src='https://drive.google.com/uc?id=17BoB0-wWWvRYnh8b7HTP1PabN-zwPHEP'>
<img src='https://drive.google.com/uc?id=1EW0YSy6r-L8pFn4k0o-Yrchi9XNkBkkA'>

#### 응용
- 태그 찾기: r'<[^>]+>'
- 최소 한개의 영문자 + 최소 한개의 숫자 + 최소 8자
  - ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$
- 최소 한개의 영문자 + 최소 한개의 숫자 + 최소 한개의 특수 문자 + 최소 8자
  - ^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$
- 최소 한개의 소문자 + 최소 한개의 대문자 + 최소 한개의 숫자 + 최소 8자
  - ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$
- 최소 한개의 소문자 + 최소 한개의 대문자 + 최소 한개의 숫자 + 최소 한개의 특수 문자+ 최소 8자
  - ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
- 최소 한개의 소문자 + 최소 한개의 대문자 + 최소 한개의 숫자 + 최소 한개의 특수 문자최소 8자 + 최대 10자 + 최소 8자 + 최대 10자
  - ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,10}$


- Email 이메일 형식
  - '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
  email_pattern = r'[a-zA-z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+'
  emails=re.findall(email_pattern,html)
- 도메인 형식
  - '[a-zA-Z0-9][a-zA-Z0-9]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}'
- 인터넷 URL
  - '(https?|ftp):\/\/[^\s/$.?#].[^\s]*'
url_pattern = r'https?://[^\s<>"]+|www\.[^\s<>"]+'
urls = re.findall(url_pattern, html)
- 유선 전화
  - '0\d-\d{3,4}-\d{4}'
- 휴대 전화
  - '(010|019|011)-\d{4}-\d{4}'
- 날짜 (YYYY-MM-DD)
  - '\d{4}-\d{1,2}-\d{1,2}'
- IPv4
  - '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'
- 주민등록 번호: '\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])-[1234]\d{6}'

#### 정규 표현식의 기본 구성 요소
1. 리터럴(Literals): 일반 텍스트 문자(예: a, b, 1, 2)

2. 메타 문자(Meta Characters): 특별한 의미를 지닌 문자들
- `.`: 어떤 한 문자와 일치 (\n 제외)
- ^: 문자열의 시작과 일치; 대괄호 안에서는 [^f] f가 아닌것
- $: 문자열의 끝과 일치
- *: 0번 이상 반복되는 경우와 일치
- +: 1번 이상 반복되는 경우와 일치
- ?: 0번 또는 1번 등장하는 경우와 일치
- {m,n}: 최소 m번, 최대 n번 반복
- []: 문자 집합 중 하나와 일치 (예: [abc]는 a, b, c 중 하나와 일치)
- |: OR 조건 (예: a|b는 a 또는 b)
- (...): 그룹화

3. 특수 시퀀스(Special Sequences):
- \d: 숫자와 일치
- \D: 숫자가 아닌 공백, 문자, 구두점 등 모든 문자와 일치
- \s: 스페이스(' '), 탭('\t'), 캐리지 리턴('\r'), 뉴라인('\n'), 폼 피드('\f') 등 공백 문자와 일치
- \S: 공백이 아닌 문자, 숫자, 특수 문자 등 모든 것과 일치
- \w: 단어 문자(문자, 숫자, 밑줄)와 일치
- \W: 단어 문자가 아닌 특수 문자, 공백 문자, 구두점 등과 일치


1. `.` (마침표)
- 의미: 어떤 한 문자와 일치(줄바꿈 문자 제외)
- 예시:
  - 패턴: a.b
  - 매칭 예시: "acb", "a*b", "a3b"
  - 불일치 예시: "ab", "a\nb"
2. ^ (캐럿)
- 의미: 문자열의 시작과 일치, 대괄호 안에서는 [^f] f가 아닌것
- 예시:
  - 패턴: ^Hello
  - 매칭 예시: "Hello world"
  - 불일치 예시: "world, Hello"
3. \$ (달러 기호)
- 의미: 문자열의 끝과 일치
- 예시:
  - 패턴: end$
  - 매칭 예시: "It's the end"
  - 불일치 예시: "end of the story"
4. \* (별표)
- 의미: 앞의 문자가 0번 이상 반복
- 예시:
  - 패턴: a*b
  - 매칭 예시: "b", "ab", "aaab"
  - 불일치 예시: "a"
5. \+ (플러스)
- 의미: 앞의 문자가 1번 이상 반복
- 예시:
  - 패턴: a+b
  - 매칭 예시: "ab", "aaab"
  - 불일치 예시: "b", "a"
6. ? (물음표)
- 의미: 앞의 문자가 0번 또는 1번 등장
- 예시:
  - 패턴: a?b
  - 매칭 예시: "ab", "b"
  - 불일치 예시: "aab"
7. {m,n} (중괄호)
- 의미: 앞의 문자가 최소 m번, 최대 n번 반복
- 예시:
  - 패턴: a{2,3}
  - 매칭 예시: "aa", "aaa"
  - 불일치 예시: "a", "aaaa"
8. `[]` (대괄호)
- 의미: 대괄호 안의 문자 중 하나와 일치
- 예시:
  - 패턴: [abc]
  - 매칭 예시: "a", "b", "c"
  - 불일치 예시: "d"
9. | (파이프)
- 의미: OR 조건
- 예시:
  - 패턴: a|b
  - 매칭 예시: "a", "b"
  - 불일치 예시: "c"
10. (...) (괄호)
- 의미: 그룹화, 캡처 그룹
- 예시:
  - 패턴: (a|b)c
  - 매칭 예시: "ac", "bc"
